=====STUDENT TESTS=====
====Good Tests====
===[STUDENT TESTS/good1.bminor Input]===

// Now for the real code

main: function integer () = {
    x: integer = 0;
    x++;
    x--;
    print x;
}
===[STUDENT TESTS/good1.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good1.bminor Output]===




===[STUDENT TESTS/good10.bminor Input]===


typechecker: function boolean () = {

    print "Pretty great. Let's make sure types work!";

    x:integer = 5 + 5;
    y: integer = x + 2;
    z: integer = x + y;
    if (z == 2) return true;
    else return false;
}
===[STUDENT TESTS/good10.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good10.bminor Output]===




===[STUDENT TESTS/good2.bminor Input]===

x:integer=0;

func: function void () = {
    x:boolean = true;
    if (x) print x;
}
===[STUDENT TESTS/good2.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good2.bminor Output]===




===[STUDENT TESTS/good3.bminor Input]===
// Getting difficult

i: integer = 0;

func: function void () = {
    for (i = 0; i < 10; i++) {
        //print x, "\n";
        i++;
    }
}

===[STUDENT TESTS/good3.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good3.bminor Output]===




===[STUDENT TESTS/good4.bminor Input]===

//
x: integer = 10;
func: function integer () = {
    //
    y: integer = x + 5;
    return y;
}
===[STUDENT TESTS/good4.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good4.bminor Output]===




===[STUDENT TESTS/good5.bminor Input]===


func: function void () = {
    if (true) {
        print "Get to the chopper!!!!";
    } else {
        print "get to the...";
    }
}

===[STUDENT TESTS/good5.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good5.bminor Output]===




===[STUDENT TESTS/good6.bminor Input]===


main: function integer () = {
    return 5;
}
===[STUDENT TESTS/good6.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good6.bminor Output]===




===[STUDENT TESTS/good7.bminor Input]===


//

main: function void()={print "So.condensed.not.even.funny";return;}
===[STUDENT TESTS/good7.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good7.bminor Output]===




===[STUDENT TESTS/good8.bminor Input]===


// Now this is getting fun 

recur: function void (x: integer) = {
    if (x==1) return;
    x--;
    recur(x);
}
===[STUDENT TESTS/good8.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good8.bminor Output]===




===[STUDENT TESTS/good9.bminor Input]===

//

main: function void () = {
    print "ALMOST DONE!!!!!";
}
===[STUDENT TESTS/good9.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good9.bminor Output]===




====Bad Tests====
===[STUDENT TESTS/bad1.bminor Input]===
main: function integer(argc: integer, argv: array [] string) = {
    argv[1];
    if( argc + 1 ){
        print "hello, ", argv[1];
    }
    else{
        print "insufficient args";
    }
}

===[STUDENT TESTS/bad1.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad1.bminor Output]===
type error: expression for if else must be a boolean but argc+1 is of type integer 




===[STUDENT TESTS/bad10.bminor Input]===
/*
This program displays a square bouncing around on the screen.
Click to reset the square in a new place.
It makes use of the (included) C gfx library and the standard C library,
and exercises, loops, comparisons, and logical operators.
*/

/* These are the functions in the gfx library. */
gfx_open: function void ( width: integer, height: integer, title:string );
gfx_point: function void ( x: integer, y: integer );
gfx_line: function void ( x1:integer, y1:integer, x2:integer, y2:integer );
gfx_color: function void ( red:integer, green: integer, blue:integer );
gfx_clear: function void ();
gfx_clear_color: function void ( red:integer, green: integer, blue:integer );
gfx_wait: function char ();
gfx_xpos: function integer ();
gfx_ypos: function integer ();
gfx_xsize: function integer ();
gfx_ysize: function integer ();
gfx_event_waiting: function boolean ();
gfx_flush: function integer ();

/* These functions come from the C standard library. */

usleep: function void ( usecs: integer );
rand: function integer();

draw_box: function void ( x: integer, y:integer, size: integer ) =
{
	gfx_color(255,255,255);
	gfx_line(x,y,x+size,y);
	gfx_line(x+size,y,x+size,y+size);
	gfx_line(x+size,y+size,x,y+size);
	gfx_line(x,y+size,x,y);
}

/*
Note that the precision multiplier indicates fixed-point
match to keep track of sub-pixel position and velocity for the box.
*/

main: function integer () =
{
	precision: integer = 100 / 2.2;

	xsize: integer = 500; // pixels
	ysize: integer = 500; // pixels 

	x: integer = precision * xsize / 2;
	y: integer = precision * ysize / 2;

	vx: integer = precision * 3;
	vy: integer = precision * -5 ;

	deltat: integer = 100;

	gfx_open(xsize,ysize,"Bounce!");

	for(;;) {
		print "x: ", x, " y: ", y, " vx: ", vx, " vy: ", vy, "\n";

		if(gfx_event_waiting()) {
			c: char;
			c = gfx_wait();
			if(c=='q') return 0;
			x = gfx_xpos()*precision;
			y = gfx_ypos()*precision;
			vx = 5*precision;
		}

		vy = vy + 1 * precision;

		if(x<0 && vx<0) {
			vx = -9*vx/10;
		}	

		if(x>(xsize*precision) && vx>0) {
			vx = -9*vx/10;
		}

		if(y>(ysize*precision) && vy>0) {
			vy = -9*vy/10;
		}

		x = x + vx*deltat/precision;
		y = y + vy*deltat/precision;

		gfx_clear();
		draw_box(x/precision,y/precision,25);
		gfx_flush();

		usleep(deltat*precision);
	}
}

===[STUDENT TESTS/bad10.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad10.bminor Output]===
type error: cannot perform expon/add/sub/div/mul on 100 of type integer with 2.200000 of type float 




===[STUDENT TESTS/bad2.bminor Input]===
/*
main: function integer();
main: function char();
*/
main: function integer() = {
    return true;
    main();
}

//main: function void() = {main;}

===[STUDENT TESTS/bad2.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad2.bminor Output]===
type error: function return type integer does not match type returned boolean 




===[STUDENT TESTS/bad3.bminor Input]===
main: function integer(main: function integer ());

main: function integer(main: function integer ()) = {
    // should resolve to param 0
    main();
}



===[STUDENT TESTS/bad3.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad3.bminor Output]===
type error: (NOT SUPPORTED) functions cannot take other functions as arguments




===[STUDENT TESTS/bad4.bminor Input]===
x: integer;

main: function integer() = {
    x: integer = x;
    print x;
    {
        x: integer = 2.8;
        print x;
    }
}

===[STUDENT TESTS/bad4.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad4.bminor Output]===
type error: cannot assign 2.800000 of type float  to x




===[STUDENT TESTS/bad5.bminor Input]===
f: function void ();

main: function void();

main: function void () = {
    f(main());
}


===[STUDENT TESTS/bad5.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad5.bminor Output]===
type error: number of arguments in function call is incorrect




===[STUDENT TESTS/bad6.bminor Input]===
// resolver allows recursion
main: function void () = {
    main(8,9,10);
}

===[STUDENT TESTS/bad6.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad6.bminor Output]===
type error: number of arguments in function call is incorrect




===[STUDENT TESTS/bad7.bminor Input]===
EXIT_SUCCESS: integer = 0;
EXIT_FAILURE: integer = 1;

factorial: function integer (i: integer) = {
    if (i < 3)  return i;
    else        return i*factorial(i-1)*2.2;
}

main: function integer (argc: integer, argv: array [] string) = {    
    if(argc < 2){
        print "I need an argument";
        return EXIT_FAILURE;
    }
    else            print argv[1], " factorial is ", factorial(argv[1]);
    return EXIT_SUCCESS;
    
}

===[STUDENT TESTS/bad7.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad7.bminor Output]===
type error: cannot perform expon/add/sub/div/mul on i*factorial(i-1) of type integer with 2.200000 of type float 
type error: function parameter is of type integer  but argument is of type string 




===[STUDENT TESTS/bad8.bminor Input]===
// funky declaration in if body
// dissallow in typecheker
main: function integer () = {
    if(main) x: void;
    return x;
}

===[STUDENT TESTS/bad8.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad8.bminor Output]===
type error: expression for if must be a boolean but main is of type function integer ( ) 
type error: function return type integer does not match type returned void 




===[STUDENT TESTS/bad9.bminor Input]===
sz: integer = 10;
map: function array [sz] integer(f: function integer(x: integer), arr: array [] integer) = {
    i: integer = 0;
    output: array [sz] integer;
    for(i = 0; i < sz; i++){
        output[i] = f(arr[i]);
    }
    return output;
}

lazy_map: function array [sz] function integer () (f: function integer(x: integer), arr: array [] integer) = {
    i: integer;
    output: array[sz] function integer();
    
    for(i = 0; i < sz; i++){
        g: function integer() = {
            return f(arr[i]);
        }
        output[i] = g;
    }
    
    return output;
}

===[STUDENT TESTS/bad9.bminor Status]===
return code: 1
Test passed successfully!

===[STUDENT TESTS/bad9.bminor Output]===
type error: (NOT SUPPORTED) functions to return other functions/arrays
type error: (NOT SUPPORTED) functions cannot take other functions as arguments
type error: (NOT SUPPORTED) functions to return other functions/arrays
type error: (NOT SUPPORTED) functions cannot take other functions as arguments




=====HIDDEN TESTS=====
====Good Tests====
===[HIDDEN TESTS/good1.bminor Input]===
/*
Correct: The parameter name can vary as long as the type is the same.
*/

x: function integer(a:integer);

x: function integer(b:integer) = {
	return 0;
}

x: function integer(c:integer);

===[HIDDEN TESTS/good1.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good1.bminor Output]===




===[HIDDEN TESTS/good2.bminor Input]===
/*
Correct: Test various nested definitions.
*/

f: function void() = {
	x: integer = 1;
	{
		print x;
		x: integer = x + 1;
		print x;
	}
	print x;
}

===[HIDDEN TESTS/good2.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good2.bminor Output]===




===[HIDDEN TESTS/good3.bminor Input]===
/*
Correct: Test various function return types.
*/

A: function boolean(x: integer, y: integer);
B: function integer(x: char);
C: function char(a: string);

main: function integer() = {
	i: integer;
	for (i = 0; i < 10; i++)
		if (i % 2 == 0)
			print i;
		else
			return i;

	if (A(B('d') - 1, 10)) {
		x: integer = 0;
		return 2 * B('c') + x;
	}

	return B(C("hello")) % 3;
}

===[HIDDEN TESTS/good3.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good3.bminor Output]===




===[HIDDEN TESTS/good4.bminor Input]===
/*
Correct: Test combinations of boolean operators.
*/

func: function void(
		a: integer,
		b: integer,
		c: boolean,
		d: boolean
	) = {

	print a -b;
	print c && d;
	print a + b * a - a ^ b /a;

	print a < b && d;
	print (a < b) || (c && d);
}

===[HIDDEN TESTS/good4.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good4.bminor Output]===




===[HIDDEN TESTS/good5.bminor Input]===
/*
Correct: Test array assignments.
*/

x:array [5] integer = {1,2,3,4,5};
y:array [5] array [5] integer;

main:function void () =
{
	y[1] = x;
	count:integer;
	for(count = 0; count < 5; count++)
	{
		y[count] = x;
	} 	
}

===[HIDDEN TESTS/good5.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good5.bminor Output]===




===[HIDDEN TESTS/good7.bminor Input]===
/*
Correct: Test if-expression and return-expression.
*/

main: function integer() = {
	m: integer = 2;
	n: boolean = true;

	if (!n) return 0; else return -m;

	print 10 * (-1 + m);
}

===[HIDDEN TESTS/good7.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good7.bminor Output]===




===[HIDDEN TESTS/good8.bminor Input]===
/*
Correct: Boolean expression in several places.
*/

x: function integer(a:boolean) = {
	if (a) for (;a;) print a;
}

===[HIDDEN TESTS/good8.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good8.bminor Output]===




===[HIDDEN TESTS/good9.bminor Input]===
/*
Correct: A program to plot a quadratic function. 
*/

/* Make use of atoi from the standard library */

atoi: function integer( s: string );

quadratic: function integer ( a: integer, b: integer, c: integer, x: integer ) = {
	return a*x*x + b*x + c*x;
}

main: function integer ( argc: integer, argv: array [] string ) =  {

      if(argc<3) {
          print "use: ", argv[0], "[a] [b] [c] [start] [end]\n";
      }

      a: integer = atoi(argv[0]);
      b: integer = atoi(argv[1]);
      c: integer = atoi(argv[2]);
      start: integer = atoi(argv[3]);
      end: integer = atoi(argv[4]);


      x: integer;
      
      for(x=start;x<end;x++) {
          print x, " ", quadratic(a,b,c,x), "\n";
      }

      return 0;
}

===[HIDDEN TESTS/good9.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good9.bminor Output]===




===[HIDDEN TESTS/good10.bminor Input]===
/*

Testing float typechecking

*/

main: function integer() = {
    m: float = 3.1;
    n: float = 5.2;
    
    x: float = m + n;

    print x;
}

===[HIDDEN TESTS/good10.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good10.bminor Output]===




===[HIDDEN TESTS/good6.bminor Input]===
/*
Correct: Test assignment of array literals.
*/

main: function void (a: integer) = {
	x: array [1] boolean;
	y: array [1] integer;
	if (x[y[a]]) return;
	{
		z: integer;
		zz: integer = z;
	}
}

===[HIDDEN TESTS/good6.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good6.bminor Output]===




====Bad Tests====
===[HIDDEN TESTS/bad1.bminor Input]===
/*
Incorrect: Mismatched types in forward declaration
*/

x: function integer(a:char);
x: function integer(a:integer) = {
	return 0;
}

===[HIDDEN TESTS/bad1.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad1.bminor Output]===




===[HIDDEN TESTS/bad2.bminor Input]===
/*
Incorrect: Variable redefined within a scope.
*/

f: function void() = {
	x: integer = 1;
	{
		print x;
		x: integer = x + 1;
		print x;
	}
	x: integer = 2;
	print x;
}

===[HIDDEN TESTS/bad2.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad2.bminor Output]===




===[HIDDEN TESTS/bad3.bminor Input]===
/*
Incorrect: Mismatched function return types.
*/

main: function void() = {
	return i;
}

func: function integer() = {
	return;
}

===[HIDDEN TESTS/bad3.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad3.bminor Output]===




===[HIDDEN TESTS/bad4.bminor Input]===
/*
Incorrect: Mismatched operators.
*/


func: function void(
		a: integer,
		b: integer,
		c: boolean,
		d: boolean
	) = {

	print a -c;
	print c * d;
	print a + b * a - a ^ b /d;

	print a < b && a;
	print (a < b) + (c && d);
}

===[HIDDEN TESTS/bad4.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad4.bminor Output]===
type error: cannot perform expon/add/sub/div/mul on a of type integer with c of type boolean 
type error: cannot perform expon/add/sub/div/mul on c of type boolean with d of type boolean 
type error: cannot perform expon/add/sub/div/mul on a^b of type integer with d of type boolean 
type error: cannot use logical operators on a<b of type boolean with a of type integer booleans only are excepted
type error: cannot perform expon/add/sub/div/mul on (a<b) of type boolean with (c&&d) of type boolean 




===[HIDDEN TESTS/bad5.bminor Input]===
/*
Incorrect: Cannot subscript a value which is not an array.
*/

main: function void() = {
	s : boolean = false;
	c : char = s[1];
	print c;
}

===[HIDDEN TESTS/bad5.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad5.bminor Output]===
type error: variable does not match array: s
type error: cannot assign s[1] of type boolean  to c




===[HIDDEN TESTS/bad6.bminor Input]===
/*
Incorrect: Cannot assign an array to an atomic type.
*/

main: function void () = {
	// array of one boolean != boolean
	x: array [1] boolean = {true};
	if (x) return;
}

===[HIDDEN TESTS/bad6.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad6.bminor Output]===
type error: (NOT SUPPORTED) array initializer in the local scope
type error: expression for if must be a boolean but x is of type array [1] boolean 




===[HIDDEN TESTS/bad7.bminor Input]===
/*
Incorrect: Improper operators on values.
*/

main: function integer() = {
	m: integer = 2;
	n: boolean = true;

	// wrong negation
	if (-n) return 0; else return !m;

	// arithmetic on boolean
	print 10 * (-1 + n);
}

===[HIDDEN TESTS/bad7.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad7.bminor Output]===
type error: n is a boolean , only floats/integers are acceptable
type error: cannot perform expon/add/sub/div/mul on -1 of type integer with n of type boolean 




===[HIDDEN TESTS/bad8.bminor Input]===
/*
Incorrect: Cannot use an integer in place of a boolean.
*/

x: function integer(a:integer) = {
	if (a) return 10;
	for (;a;) print a;
}

===[HIDDEN TESTS/bad8.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad8.bminor Output]===
type error: expression for if must be a boolean but a is of type integer 
type error: second expr for for loop must be a boolean but a is of type integer 




===[HIDDEN TESTS/bad9.bminor Input]===
/*
Incorrect: Several type mismatches throughout.
*/

/* Make use of atoi from the standard library */

atoi: function boolean ( s: string );

quadratic: function void ( a: char, b: string, c: boolean, x: integer ) = {
	return a*x*x + b*x + c*x;
}

main: function integer ( argc: integer, argv: array [] string ) =  {

      if(argc<3) {
          print "use: ", argv[0], "[a] [b] [c] [start] [end]\n";
      }

      a: integer = atoi(argv[0]);
      b: integer = atoi(argv[1]);
      c: integer = atoi(argv[2]);
      start: integer = atoi(argv[3]);
      end: integer = atoi(argv[4]);


      x: integer;
      
      for(x=start;x<end;x++) {
          print x, " ", quadratic(a,b,c,x), "\n";
      }

      return 0;
}

===[HIDDEN TESTS/bad9.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad9.bminor Output]===
type error: cannot perform expon/add/sub/div/mul on a of type char with x of type integer 
type error: cannot perform expon/add/sub/div/mul on b of type string with x of type integer 
type error: cannot perform expon/add/sub/div/mul on c of type boolean with x of type integer 
type error: function return type void does not match type returned integer 
type error: cannot assign atoi(argv[0]) of type boolean  to a
type error: cannot assign atoi(argv[1]) of type boolean  to b
type error: cannot assign atoi(argv[2]) of type boolean  to c
type error: cannot assign atoi(argv[3]) of type boolean  to start
type error: cannot assign atoi(argv[4]) of type boolean  to end
type error: function parameter is of type char  but argument is of type integer 
type error: function parameter is of type string  but argument is of type integer 
type error: function parameter is of type boolean  but argument is of type integer 
type error: you are trying to print a void  which is not allowed 




===[HIDDEN TESTS/bad10.bminor Input]===
/*
Incorrect: Several type errors throughout.
*/

abs: function string (n: integer);

digits: array [6] char = {
	14,
	8,
	6168,
	42,
	0,
	74546
};

main:function integer () = {
	digits[4] = -468;
	i: boolean = 0;
	for (; abs(digits[i]) == digits[i];) {
		print digits[i];
		i = i + 1;
		print ' ';
	}
	print '\n';
        z: float = 1.0 + 2;
	return 0;
}

===[HIDDEN TESTS/bad10.bminor Status]===
return code: 1
Test passed successfully!

===[HIDDEN TESTS/bad10.bminor Output]===
type error: cannot assign {14,8,6168,42,0,74546} of type array [] integer  to digits
type error: cannot assign digits[4] of type char to -468 of type integer 
type error: cannot assign 0 of type integer  to i
type error: array index i of type array [6] char is not an integer
type error: function parameter is of type integer  but argument is of type char 
type error: array index i of type array [6] char is not an integer
type error: cannot compare abs(digits[i]) of type string with digits[i] of type char 
type error: array index i of type array [6] char is not an integer
type error: cannot perform expon/add/sub/div/mul on i of type boolean with 1 of type integer 
type error: cannot assign i of type boolean to i+1 of type integer 
type error: cannot perform expon/add/sub/div/mul on 1.000000 of type float with 2 of type integer 
type error: cannot assign 1.000000+2 of type integer  to z




===== SUMMARIZED PRINTER RESULTS =====
{
  "student_tests": {
    "Good": {
      "correct": 10,
      "incorrect": 0
    },
    "Bad": {
      "correct": 10,
      "incorrect": 0
    }
  },
  "hidden_tests": {
    "Good": {
      "correct": 10,
      "incorrect": 0
    },
    "Bad": {
      "correct": 10,
      "incorrect": 0
    }
  }
}

Printer Project
---------------

Continued correctness of the -scan, -parse, -print, and -resolve options (30/30 points)
----------------------------------------------
Scanning, parsing, printing, and resolving all seem to be correct.

General correctness of the -typecheck option. (20/20 points)
----------------------------------------------
Typechecking looks to be done correctly

Student Tests (20/20 points)
------------------------------------------
Nice test coverage

Hidden Tests (20/20 points)
------------------------------------------
Good work passing all of the hidden tests

Coding Style (10/10 points)
------------------------------------------
Coding style looks quite nice. Well done!

---------------
