=====STUDENT TESTS=====
====Good Tests====
===[good1.bminor Input]===
//empty program

===[good1.bminor Output]===
Success!

CPPCOMMENT_TOKEN
Parse Succeeded


return code: 0


===[good10.bminor Input]===
//some variable usages
x:integer;
y:integer;
z:integer;
arr:array[5] array[5] integer;
str: string = "hello world";
fxn : function  integer () =
{
	arr[3] = 5;
	x = arr[2];
	x++;
	return z;
	c:char = str[0];
} 

===[good10.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN z
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN arr
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
INT_TOKEN 5
CLOSE_BRACK_TOKEN
ARRAY
OPEN_BRACK_TOKEN
INT_TOKEN 5
CLOSE_BRACK_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN str
COLON_TOKEN
STRING
ASSIGN_TOKEN
STRING_TOKEN hello world
SEMICOLON_TOKEN
ID_TOKEN fxn
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN arr
OPEN_BRACK_TOKEN
INT_TOKEN 3
CLOSE_BRACK_TOKEN
ASSIGN_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
ID_TOKEN x
ASSIGN_TOKEN
ID_TOKEN arr
OPEN_BRACK_TOKEN
INT_TOKEN 2
CLOSE_BRACK_TOKEN
SEMICOLON_TOKEN
ID_TOKEN x
INCREMENT_TOKEN
SEMICOLON_TOKEN
RETURN
ID_TOKEN z
SEMICOLON_TOKEN
ID_TOKEN c
COLON_TOKEN
CHAR
ASSIGN_TOKEN
ID_TOKEN str
OPEN_BRACK_TOKEN
INT_TOKEN 0
CLOSE_BRACK_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good11.bminor Input]===
// test print statements
str:string = "this is a string";
str2:string;
x:integer;
main: function void () = {
	print;
	print "\n \r \t ";
	print x, y, "hello", true, false;
	print str, " str ", x, str2; 
}

===[good11.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN str
COLON_TOKEN
STRING
ASSIGN_TOKEN
STRING_TOKEN this is a string
SEMICOLON_TOKEN
ID_TOKEN str2
COLON_TOKEN
STRING
SEMICOLON_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
PRINT
SEMICOLON_TOKEN
PRINT
STRING_TOKEN 
  	 
SEMICOLON_TOKEN
PRINT
ID_TOKEN x
COMMA_TOKEN
ID_TOKEN y
COMMA_TOKEN
STRING_TOKEN hello
COMMA_TOKEN
TRUE
COMMA_TOKEN
FALSE
SEMICOLON_TOKEN
PRINT
ID_TOKEN str
COMMA_TOKEN
STRING_TOKEN  str 
COMMA_TOKEN
ID_TOKEN x
COMMA_TOKEN
ID_TOKEN str2
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good12.bminor Input]===
//test expressions inside of array indexes
arr:array [5] integer = {0,1,2,3,4};

main:function void() =
{
	x:integer = 5;
	y:integer = 3;
	arr[x - y] = 4;
	arr[y + x * 3] = arr[2+ x^2 - 1];
} 
	

===[good12.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN arr
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
INT_TOKEN 5
CLOSE_BRACK_TOKEN
INTEGER
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
INT_TOKEN 0
COMMA_TOKEN
INT_TOKEN 1
COMMA_TOKEN
INT_TOKEN 2
COMMA_TOKEN
INT_TOKEN 3
COMMA_TOKEN
INT_TOKEN 4
CLOSE_CURLY_TOKEN
SEMICOLON_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 3
SEMICOLON_TOKEN
ID_TOKEN arr
OPEN_BRACK_TOKEN
ID_TOKEN x
SUBTRACTION_TOKEN
ID_TOKEN y
CLOSE_BRACK_TOKEN
ASSIGN_TOKEN
INT_TOKEN 4
SEMICOLON_TOKEN
ID_TOKEN arr
OPEN_BRACK_TOKEN
ID_TOKEN y
ADDITION_TOKEN
ID_TOKEN x
MULTIPLY_TOKEN
INT_TOKEN 3
CLOSE_BRACK_TOKEN
ASSIGN_TOKEN
ID_TOKEN arr
OPEN_BRACK_TOKEN
INT_TOKEN 2
ADDITION_TOKEN
ID_TOKEN x
POWER_TOKEN
INT_TOKEN 2
SUBTRACTION_TOKEN
INT_TOKEN 1
CLOSE_BRACK_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good13.bminor Input]===
// test types of literals
x:integer = 5;
c:char = 'A';
str:string = "hello";
iarr: array [4] integer = {1,2,3,4};
carr:array [4] char = {'a', 'b', 'c', 'd'};
barr:array [4] boolean = {true, false, true, true};
iaar: array [4] array [4] integer = {iarr, iarr, iarr, iarr};

===[good13.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
ID_TOKEN c
COLON_TOKEN
CHAR
ASSIGN_TOKEN
CHAR_TOKEN A
SEMICOLON_TOKEN
ID_TOKEN str
COLON_TOKEN
STRING
ASSIGN_TOKEN
STRING_TOKEN hello
SEMICOLON_TOKEN
ID_TOKEN iarr
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
INT_TOKEN 4
CLOSE_BRACK_TOKEN
INTEGER
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
INT_TOKEN 1
COMMA_TOKEN
INT_TOKEN 2
COMMA_TOKEN
INT_TOKEN 3
COMMA_TOKEN
INT_TOKEN 4
CLOSE_CURLY_TOKEN
SEMICOLON_TOKEN
ID_TOKEN carr
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
INT_TOKEN 4
CLOSE_BRACK_TOKEN
CHAR
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
CHAR_TOKEN a
COMMA_TOKEN
CHAR_TOKEN b
COMMA_TOKEN
CHAR_TOKEN c
COMMA_TOKEN
CHAR_TOKEN d
CLOSE_CURLY_TOKEN
SEMICOLON_TOKEN
ID_TOKEN barr
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
INT_TOKEN 4
CLOSE_BRACK_TOKEN
BOOLEAN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
TRUE
COMMA_TOKEN
FALSE
COMMA_TOKEN
TRUE
COMMA_TOKEN
TRUE
CLOSE_CURLY_TOKEN
SEMICOLON_TOKEN
ID_TOKEN iaar
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
INT_TOKEN 4
CLOSE_BRACK_TOKEN
ARRAY
OPEN_BRACK_TOKEN
INT_TOKEN 4
CLOSE_BRACK_TOKEN
INTEGER
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN iarr
COMMA_TOKEN
ID_TOKEN iarr
COMMA_TOKEN
ID_TOKEN iarr
COMMA_TOKEN
ID_TOKEN iarr
CLOSE_CURLY_TOKEN
SEMICOLON_TOKEN
Parse Succeeded


return code: 0


===[good14.bminor Input]===
// test function calls
func1: function integer (x:integer, y:char) =
{
	print x;
	return 1;
}
func2: function integer (y:char) =
{
	print x;
	return 2;
}
func3: function integer (x:integer, y:char, z:string)=
{
	print z;
	return 4;
}

main: function void ()=
{
	x:integer = 4;
	y:char = 'c';
	z:string = "hello";
	func2('c');
	func2(y);
	func1(42, y);
	func1(x, 'c');
	func3(4, y, z);
}

===[good14.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN func1
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN y
COLON_TOKEN
CHAR
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
PRINT
ID_TOKEN x
SEMICOLON_TOKEN
RETURN
INT_TOKEN 1
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ID_TOKEN func2
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
ID_TOKEN y
COLON_TOKEN
CHAR
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
PRINT
ID_TOKEN x
SEMICOLON_TOKEN
RETURN
INT_TOKEN 2
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ID_TOKEN func3
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN y
COLON_TOKEN
CHAR
COMMA_TOKEN
ID_TOKEN z
COLON_TOKEN
STRING
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
PRINT
ID_TOKEN z
SEMICOLON_TOKEN
RETURN
INT_TOKEN 4
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 4
SEMICOLON_TOKEN
ID_TOKEN y
COLON_TOKEN
CHAR
ASSIGN_TOKEN
CHAR_TOKEN c
SEMICOLON_TOKEN
ID_TOKEN z
COLON_TOKEN
STRING
ASSIGN_TOKEN
STRING_TOKEN hello
SEMICOLON_TOKEN
ID_TOKEN func2
OPEN_PARAN_TOKEN
CHAR_TOKEN c
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN func2
OPEN_PARAN_TOKEN
ID_TOKEN y
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN func1
OPEN_PARAN_TOKEN
INT_TOKEN 42
COMMA_TOKEN
ID_TOKEN y
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN func1
OPEN_PARAN_TOKEN
ID_TOKEN x
COMMA_TOKEN
CHAR_TOKEN c
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN func3
OPEN_PARAN_TOKEN
INT_TOKEN 4
COMMA_TOKEN
ID_TOKEN y
COMMA_TOKEN
ID_TOKEN z
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good15.bminor Input]===
/*
This program displays a square bouncing around on the screen.
Click to reset the square in a new place.
It makes use of the (included) C gfx library and the standard C library,
and exercises, loops, comparisons, and logical operators.
*/

/* These are the functions in the gfx library. */
gfx_open: function void ( width: integer, height: integer, title:string );
gfx_point: function void ( x: integer, y: integer );
gfx_line: function void ( x1:integer, y1:integer, x2:integer, y2:integer );
gfx_color: function void ( red:integer, green: integer, blue:integer );
gfx_clear: function void ();
gfx_clear_color: function void ( red:integer, green: integer, blue:integer );
gfx_wait: function char ();
gfx_xpos: function integer ();
gfx_ypos: function integer ();
gfx_xsize: function integer ();
gfx_ysize: function integer ();
gfx_event_waiting: function boolean ();
gfx_flush: function integer ();

/* These functions come from the C standard library. */

usleep: function void ( usecs: integer );
rand: function integer();

draw_box: function void ( x: integer, y:integer, size: integer ) =
{
	gfx_color(255,255,255);
	gfx_line(x,y,x+size,y);
	gfx_line(x+size,y,x+size,y+size);
	gfx_line(x+size,y+size,x,y+size);
	gfx_line(x,y+size,x,y);
}

/*
Note that the precision multiplier indicates fixed-point
match to keep track of sub-pixel position and velocity for the box.
*/

main: function integer () =
{
	precision: integer = 100;

	xsize: integer = 500; // pixels
	ysize: integer = 500; // pixels 

	x: integer = precision * xsize / 2;
	y: integer = precision * ysize / 2;

	vx: integer = precision * 3;
	vy: integer = precision * -5 ;

	deltat: integer = 100;

	gfx_open(xsize,ysize,"Bounce!");

	for(;;) {
		print "x: ", x, " y: ", y, " vx: ", vx, " vy: ", vy, "\n";

		if(gfx_event_waiting()) {
			c: char;
			c = gfx_wait();
			if(c=='q') return 0;
			x = gfx_xpos()*precision;
			y = gfx_ypos()*precision;
			vx = 5*precision;
		}

		vy = vy + 1 * precision;

		if(x<0 && vx<0) {
			vx = -9*vx/10;
		}	

		if(x>(xsize*precision) && vx>0) {
			vx = -9*vx/10;
		}

		if(y>(ysize*precision) && vy>0) {
			vy = -9*vy/10;
		}

		x = x + vx*deltat/precision;
		y = y + vy*deltat/precision;

		gfx_clear();
		draw_box(x/precision,y/precision,25);
		gfx_flush();

		usleep(deltat*precision);
	}
}

===[good15.bminor Output]===
Success!

CCOMMENT_TOKEN
CCOMMENT_TOKEN
ID_TOKEN gfx_open
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN width
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN height
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN title
COLON_TOKEN
STRING
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_point
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_line
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN x1
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN y1
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN x2
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN y2
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_color
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN red
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN green
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN blue
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_clear
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_clear_color
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN red
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN green
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN blue
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_wait
COLON_TOKEN
FUNCTION
CHAR
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_xpos
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_ypos
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_xsize
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_ysize
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_event_waiting
COLON_TOKEN
FUNCTION
BOOLEAN
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_flush
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
CCOMMENT_TOKEN
ID_TOKEN usleep
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN usecs
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN rand
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN draw_box
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN size
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN gfx_color
OPEN_PARAN_TOKEN
INT_TOKEN 255
COMMA_TOKEN
INT_TOKEN 255
COMMA_TOKEN
INT_TOKEN 255
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_line
OPEN_PARAN_TOKEN
ID_TOKEN x
COMMA_TOKEN
ID_TOKEN y
COMMA_TOKEN
ID_TOKEN x
ADDITION_TOKEN
ID_TOKEN size
COMMA_TOKEN
ID_TOKEN y
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_line
OPEN_PARAN_TOKEN
ID_TOKEN x
ADDITION_TOKEN
ID_TOKEN size
COMMA_TOKEN
ID_TOKEN y
COMMA_TOKEN
ID_TOKEN x
ADDITION_TOKEN
ID_TOKEN size
COMMA_TOKEN
ID_TOKEN y
ADDITION_TOKEN
ID_TOKEN size
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_line
OPEN_PARAN_TOKEN
ID_TOKEN x
ADDITION_TOKEN
ID_TOKEN size
COMMA_TOKEN
ID_TOKEN y
ADDITION_TOKEN
ID_TOKEN size
COMMA_TOKEN
ID_TOKEN x
COMMA_TOKEN
ID_TOKEN y
ADDITION_TOKEN
ID_TOKEN size
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_line
OPEN_PARAN_TOKEN
ID_TOKEN x
COMMA_TOKEN
ID_TOKEN y
ADDITION_TOKEN
ID_TOKEN size
COMMA_TOKEN
ID_TOKEN x
COMMA_TOKEN
ID_TOKEN y
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
CCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN precision
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 100
SEMICOLON_TOKEN
ID_TOKEN xsize
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 500
SEMICOLON_TOKEN
CPPCOMMENT_TOKEN
ID_TOKEN ysize
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 500
SEMICOLON_TOKEN
CPPCOMMENT_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
ID_TOKEN precision
MULTIPLY_TOKEN
ID_TOKEN xsize
DIVISION_TOKEN
INT_TOKEN 2
SEMICOLON_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
ID_TOKEN precision
MULTIPLY_TOKEN
ID_TOKEN ysize
DIVISION_TOKEN
INT_TOKEN 2
SEMICOLON_TOKEN
ID_TOKEN vx
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
ID_TOKEN precision
MULTIPLY_TOKEN
INT_TOKEN 3
SEMICOLON_TOKEN
ID_TOKEN vy
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
ID_TOKEN precision
MULTIPLY_TOKEN
SUBTRACTION_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
ID_TOKEN deltat
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 100
SEMICOLON_TOKEN
ID_TOKEN gfx_open
OPEN_PARAN_TOKEN
ID_TOKEN xsize
COMMA_TOKEN
ID_TOKEN ysize
COMMA_TOKEN
STRING_TOKEN Bounce!
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
FOR
OPEN_PARAN_TOKEN
SEMICOLON_TOKEN
SEMICOLON_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
PRINT
STRING_TOKEN x: 
COMMA_TOKEN
ID_TOKEN x
COMMA_TOKEN
STRING_TOKEN  y: 
COMMA_TOKEN
ID_TOKEN y
COMMA_TOKEN
STRING_TOKEN  vx: 
COMMA_TOKEN
ID_TOKEN vx
COMMA_TOKEN
STRING_TOKEN  vy: 
COMMA_TOKEN
ID_TOKEN vy
COMMA_TOKEN
STRING_TOKEN 

SEMICOLON_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN gfx_event_waiting
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN c
COLON_TOKEN
CHAR
SEMICOLON_TOKEN
ID_TOKEN c
ASSIGN_TOKEN
ID_TOKEN gfx_wait
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN c
ASSERT_EQ_TOKEN
CHAR_TOKEN q
CLOSE_PARAN_TOKEN
RETURN
INT_TOKEN 0
SEMICOLON_TOKEN
ID_TOKEN x
ASSIGN_TOKEN
ID_TOKEN gfx_xpos
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
MULTIPLY_TOKEN
ID_TOKEN precision
SEMICOLON_TOKEN
ID_TOKEN y
ASSIGN_TOKEN
ID_TOKEN gfx_ypos
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
MULTIPLY_TOKEN
ID_TOKEN precision
SEMICOLON_TOKEN
ID_TOKEN vx
ASSIGN_TOKEN
INT_TOKEN 5
MULTIPLY_TOKEN
ID_TOKEN precision
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ID_TOKEN vy
ASSIGN_TOKEN
ID_TOKEN vy
ADDITION_TOKEN
INT_TOKEN 1
MULTIPLY_TOKEN
ID_TOKEN precision
SEMICOLON_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
LESS_TOKEN
INT_TOKEN 0
AND_TOKEN
ID_TOKEN vx
LESS_TOKEN
INT_TOKEN 0
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN vx
ASSIGN_TOKEN
SUBTRACTION_TOKEN
INT_TOKEN 9
MULTIPLY_TOKEN
ID_TOKEN vx
DIVISION_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
GREATER_TOKEN
OPEN_PARAN_TOKEN
ID_TOKEN xsize
MULTIPLY_TOKEN
ID_TOKEN precision
CLOSE_PARAN_TOKEN
AND_TOKEN
ID_TOKEN vx
GREATER_TOKEN
INT_TOKEN 0
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN vx
ASSIGN_TOKEN
SUBTRACTION_TOKEN
INT_TOKEN 9
MULTIPLY_TOKEN
ID_TOKEN vx
DIVISION_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN y
GREATER_TOKEN
OPEN_PARAN_TOKEN
ID_TOKEN ysize
MULTIPLY_TOKEN
ID_TOKEN precision
CLOSE_PARAN_TOKEN
AND_TOKEN
ID_TOKEN vy
GREATER_TOKEN
INT_TOKEN 0
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN vy
ASSIGN_TOKEN
SUBTRACTION_TOKEN
INT_TOKEN 9
MULTIPLY_TOKEN
ID_TOKEN vy
DIVISION_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ID_TOKEN x
ASSIGN_TOKEN
ID_TOKEN x
ADDITION_TOKEN
ID_TOKEN vx
MULTIPLY_TOKEN
ID_TOKEN deltat
DIVISION_TOKEN
ID_TOKEN precision
SEMICOLON_TOKEN
ID_TOKEN y
ASSIGN_TOKEN
ID_TOKEN y
ADDITION_TOKEN
ID_TOKEN vy
MULTIPLY_TOKEN
ID_TOKEN deltat
DIVISION_TOKEN
ID_TOKEN precision
SEMICOLON_TOKEN
ID_TOKEN gfx_clear
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN draw_box
OPEN_PARAN_TOKEN
ID_TOKEN x
DIVISION_TOKEN
ID_TOKEN precision
COMMA_TOKEN
ID_TOKEN y
DIVISION_TOKEN
ID_TOKEN precision
COMMA_TOKEN
INT_TOKEN 25
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN gfx_flush
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN usleep
OPEN_PARAN_TOKEN
ID_TOKEN deltat
MULTIPLY_TOKEN
ID_TOKEN precision
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good2.bminor Input]===
// variables in and out of fxns
x:integer = 5;
y:integer;
z:char = 'A';
fxn: function void () =
{
	x:integer;
	y:integer = 16;
	w:boolean = true;
	q:boolean;
}

===[good2.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN z
COLON_TOKEN
CHAR
ASSIGN_TOKEN
CHAR_TOKEN A
SEMICOLON_TOKEN
ID_TOKEN fxn
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 16
SEMICOLON_TOKEN
ID_TOKEN w
COLON_TOKEN
BOOLEAN
ASSIGN_TOKEN
TRUE
SEMICOLON_TOKEN
ID_TOKEN q
COLON_TOKEN
BOOLEAN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good3.bminor Input]===
// produces correct precedence of operations

main: function void () = {
	x:integer = 5;
	y:integer = 4;
	if(true || false && true)
	{
		x = 6;
		
	}
}

===[good3.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 4
SEMICOLON_TOKEN
IF
OPEN_PARAN_TOKEN
TRUE
OR_TOKEN
FALSE
AND_TOKEN
TRUE
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
ASSIGN_TOKEN
INT_TOKEN 6
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good4.bminor Input]===
// produces correct precedence of operations

main: function void() = {
	x:integer = 5;
	y:integer = 4;
	if(!((4*x^5 + 4) - 4 >= 1))
	{
		x = 6;
		
	}
}

===[good4.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 4
SEMICOLON_TOKEN
IF
OPEN_PARAN_TOKEN
NOT_TOKEN
OPEN_PARAN_TOKEN
OPEN_PARAN_TOKEN
INT_TOKEN 4
MULTIPLY_TOKEN
ID_TOKEN x
POWER_TOKEN
INT_TOKEN 5
ADDITION_TOKEN
INT_TOKEN 4
CLOSE_PARAN_TOKEN
SUBTRACTION_TOKEN
INT_TOKEN 4
GREATER_OR_EQ_TOKEN
INT_TOKEN 1
CLOSE_PARAN_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
ASSIGN_TOKEN
INT_TOKEN 6
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good5.bminor Input]===
// produces correct precedence of operations

main: function void() = {
	x:integer = 5;
	y:integer = 4;
	z:boolean  = true || -(4*x^5) + (4 - 4) >= 16 - 6 * 3 + x && y^2 == 16;
}

===[good5.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 4
SEMICOLON_TOKEN
ID_TOKEN z
COLON_TOKEN
BOOLEAN
ASSIGN_TOKEN
TRUE
OR_TOKEN
SUBTRACTION_TOKEN
OPEN_PARAN_TOKEN
INT_TOKEN 4
MULTIPLY_TOKEN
ID_TOKEN x
POWER_TOKEN
INT_TOKEN 5
CLOSE_PARAN_TOKEN
ADDITION_TOKEN
OPEN_PARAN_TOKEN
INT_TOKEN 4
SUBTRACTION_TOKEN
INT_TOKEN 4
CLOSE_PARAN_TOKEN
GREATER_OR_EQ_TOKEN
INT_TOKEN 16
SUBTRACTION_TOKEN
INT_TOKEN 6
MULTIPLY_TOKEN
INT_TOKEN 3
ADDITION_TOKEN
ID_TOKEN x
AND_TOKEN
ID_TOKEN y
POWER_TOKEN
INT_TOKEN 2
ASSERT_EQ_TOKEN
INT_TOKEN 16
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good6.bminor Input]===
// test block creations
x:integer;
main:function void() = {
	for(;;)
	{
		x:integer = 5;
		{
			x:integer = 6;
			print x;
		}
	}

	if(x > 5)
	{
		x++;
	}
}
funct2: function void() = {
	{
		print "hello";
	}
	if(x > 5)
		if(x < 5)
		{
			x++;
		}
	else
	{
		x++;
		x--;
	}		
	
}

===[good6.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
FOR
OPEN_PARAN_TOKEN
SEMICOLON_TOKEN
SEMICOLON_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 6
SEMICOLON_TOKEN
PRINT
ID_TOKEN x
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
CLOSE_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
GREATER_TOKEN
INT_TOKEN 5
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
INCREMENT_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
CLOSE_CURLY_TOKEN
ID_TOKEN funct2
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
OPEN_CURLY_TOKEN
PRINT
STRING_TOKEN hello
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
GREATER_TOKEN
INT_TOKEN 5
CLOSE_PARAN_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
LESS_TOKEN
INT_TOKEN 5
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
INCREMENT_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ELSE
OPEN_CURLY_TOKEN
ID_TOKEN x
INCREMENT_TOKEN
SEMICOLON_TOKEN
ID_TOKEN x
DECREMENT_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good7.bminor Input]===
// basic if else works with & without blocks
main:function void() = {
	if( 10 < 20 )
		print "hi";
	else
		print "hello";
	if( 10 < 20 )
	{
		print "hi";
	}
	else
	{
		print "hello";
	}
}

===[good7.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
INT_TOKEN 10
LESS_TOKEN
INT_TOKEN 20
CLOSE_PARAN_TOKEN
PRINT
STRING_TOKEN hi
SEMICOLON_TOKEN
ELSE
PRINT
STRING_TOKEN hello
SEMICOLON_TOKEN
IF
OPEN_PARAN_TOKEN
INT_TOKEN 10
LESS_TOKEN
INT_TOKEN 20
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
PRINT
STRING_TOKEN hi
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ELSE
OPEN_CURLY_TOKEN
PRINT
STRING_TOKEN hello
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good8.bminor Input]===
//solved if else works

main: function void() = {
	x:integer = 5;
	if( 4 < 5 )
		if( 10 < 20 )
			for(x = 0; x < 5; x++)
				if( 4 < 5 )
					print "helloo\n";
				else
					print "hello\n";
		else
			print "goodbye";
}

===[good8.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
IF
OPEN_PARAN_TOKEN
INT_TOKEN 4
LESS_TOKEN
INT_TOKEN 5
CLOSE_PARAN_TOKEN
IF
OPEN_PARAN_TOKEN
INT_TOKEN 10
LESS_TOKEN
INT_TOKEN 20
CLOSE_PARAN_TOKEN
FOR
OPEN_PARAN_TOKEN
ID_TOKEN x
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
ID_TOKEN x
LESS_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
ID_TOKEN x
INCREMENT_TOKEN
CLOSE_PARAN_TOKEN
IF
OPEN_PARAN_TOKEN
INT_TOKEN 4
LESS_TOKEN
INT_TOKEN 5
CLOSE_PARAN_TOKEN
PRINT
STRING_TOKEN helloo

SEMICOLON_TOKEN
ELSE
PRINT
STRING_TOKEN hello

SEMICOLON_TOKEN
ELSE
PRINT
STRING_TOKEN goodbye
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good9.bminor Input]===
//tests param lists
fxn: function integer (x:integer)=
{
	return x++;
}

fxn2: function char (x:integer, y:char, z:boolean)=
{
	if(y=='z')
		return 'Z';
	else
		return 'z';
}

fxn3: function char (x: array [] integer, y:char, z: array [] array [] boolean)=
{
	if(y=='z')
		return 'Z';
	else
		return 'z';
}


===[good9.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN fxn
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
RETURN
ID_TOKEN x
INCREMENT_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ID_TOKEN fxn2
COLON_TOKEN
FUNCTION
CHAR
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN y
COLON_TOKEN
CHAR
COMMA_TOKEN
ID_TOKEN z
COLON_TOKEN
BOOLEAN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN y
ASSERT_EQ_TOKEN
CHAR_TOKEN z
CLOSE_PARAN_TOKEN
RETURN
CHAR_TOKEN Z
SEMICOLON_TOKEN
ELSE
RETURN
CHAR_TOKEN z
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ID_TOKEN fxn3
COLON_TOKEN
FUNCTION
CHAR
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
CLOSE_BRACK_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN y
COLON_TOKEN
CHAR
COMMA_TOKEN
ID_TOKEN z
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
CLOSE_BRACK_TOKEN
ARRAY
OPEN_BRACK_TOKEN
CLOSE_BRACK_TOKEN
BOOLEAN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN y
ASSERT_EQ_TOKEN
CHAR_TOKEN z
CLOSE_PARAN_TOKEN
RETURN
CHAR_TOKEN Z
SEMICOLON_TOKEN
ELSE
RETURN
CHAR_TOKEN z
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


====Bad Tests====
===[bad1.bminor Input]===
// two multiples should generate parse error
main: function void() =
{
	x:integer = 5 ** 5;
	print x;
}

===[bad1.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 5
MULTIPLY_TOKEN
MULTIPLY_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[bad10.bminor Input]===
// test else without a if to match it
x:integer;
funct2: function void() = {
			if(x < 5)
			{
				x++;
			}
			else
			{
				x++;
				x--;
			}
		 
	else 
	{
		print "error, this shouldn't work";
	}
			
	
}

===[bad10.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN funct2
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
LESS_TOKEN
INT_TOKEN 5
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
INCREMENT_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ELSE
OPEN_CURLY_TOKEN
ID_TOKEN x
INCREMENT_TOKEN
SEMICOLON_TOKEN
ID_TOKEN x
DECREMENT_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ELSE
Parse Failed

Parser error: syntax error

return code: 1


===[bad11.bminor Input]===
// test function calls with wrong format in calls

main: function void () =
{
	print x;
	func3(4 y, z);
}

===[bad11.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
PRINT
ID_TOKEN x
SEMICOLON_TOKEN
ID_TOKEN func3
OPEN_PARAN_TOKEN
INT_TOKEN 4
ID_TOKEN y
Parse Failed

Parser error: syntax error

return code: 1


===[bad12.bminor Input]===
//test functions without equal signs in definition
main: function void () = {
	print "goodbye";
}
main2:function void () {
	print "hello";
}

===[bad12.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
PRINT
STRING_TOKEN goodbye
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ID_TOKEN main2
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[bad13.bminor Input]===
// test function without closing brace
x:integer = 6;
fxn:function void() =
{
	integer= 5; 
	
	
}

===[bad13.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 6
SEMICOLON_TOKEN
ID_TOKEN fxn
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
INTEGER
Parse Failed

Parser error: syntax error

return code: 1


===[bad14.bminor Input]===
// unmatched {
x:function(y:integer)=
{


===[bad14.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN x
COLON_TOKEN
FUNCTION
OPEN_PARAN_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[bad15.bminor Input]===
//arrays must have brackets in decleration
x:array integer = {1, 2,3,4};

===[bad15.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN x
COLON_TOKEN
ARRAY
INTEGER
Parse Failed

Parser error: syntax error

return code: 1


===[bad2.bminor Input]===
// semicolon isn't a statement
fxn:function void() =
{
	;
}

===[bad2.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN fxn
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
SEMICOLON_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[bad3.bminor Input]===
// can't use anything but print in this form
printf "hello world", x, y;

===[bad3.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN printf
STRING_TOKEN hello world
Parse Failed

Parser error: syntax error

return code: 1


===[bad4.bminor Input]===
// for loop without correct # of args
main:function void()=
{
	for(i=0; i++) {
		print i;
	}
}

===[bad4.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
FOR
OPEN_PARAN_TOKEN
ID_TOKEN i
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
ID_TOKEN i
INCREMENT_TOKEN
CLOSE_PARAN_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[bad5.bminor Input]===
//print not seperated by ,'s
x:intger = 5;
main:function void()
{
	print x x "hello";
}

===[bad5.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN x
COLON_TOKEN
ID_TOKEN intger
Parse Failed

Parser error: syntax error

return code: 1


===[bad6.bminor Input]===
// expressions must end with ;
x:integer = 5;

main:function void()=
{
	x++;
	x++
}

===[bad6.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
INCREMENT_TOKEN
SEMICOLON_TOKEN
ID_TOKEN x
INCREMENT_TOKEN
CLOSE_CURLY_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[bad7.bminor Input]===
// if must be matched
x:integer = 5;
main:function void()=
{
	x++;
	if(x > 5)
}

===[bad7.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
INCREMENT_TOKEN
SEMICOLON_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
GREATER_TOKEN
INT_TOKEN 5
CLOSE_PARAN_TOKEN
CLOSE_CURLY_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[bad8.bminor Input]===
//checking param lists
main:function void("hello", x:integer) =
{
	print x;
}

===[bad8.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
STRING_TOKEN hello
Parse Failed

Parser error: syntax error

return code: 1


===[bad9.bminor Input]===
//checking param lists with trailing ,
main:function void(hello:string, )=
{
	print hello;
}

===[bad9.bminor Output]===
Success!

CPPCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN hello
COLON_TOKEN
STRING
COMMA_TOKEN
CLOSE_PARAN_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


=====HIDDEN TESTS=====
====Good Tests====
===[good1.bminor Input]===
/* A program is a sequence of declarations */
/* Try a variety of variable declarations. */

n: integer;
m: integer = 20;

b: boolean;
c: boolean = true;
s: string;
t: string = "hello\n";
d: char;
e: char = 'x';

x: array [] string;
y: array [] string = { "a", "b", "c" };
z: array [] array [] string = { {"a","b","c"}, {"x","y","z"} };

g: array [3] string;
h: array [3] string = { "a", "b", "c" };
i: array [2] array [3] string = { {"a","b","c"}, {"x","y","z"} };

===[good1.bminor Output]===
TEST NOT PASSED

CCOMMENT_TOKEN
CCOMMENT_TOKEN
ID_TOKEN n
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN m
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 20
SEMICOLON_TOKEN
ID_TOKEN b
COLON_TOKEN
BOOLEAN
SEMICOLON_TOKEN
ID_TOKEN c
COLON_TOKEN
BOOLEAN
ASSIGN_TOKEN
TRUE
SEMICOLON_TOKEN
ID_TOKEN s
COLON_TOKEN
STRING
SEMICOLON_TOKEN
ID_TOKEN t
COLON_TOKEN
STRING
ASSIGN_TOKEN
STRING_TOKEN hello

SEMICOLON_TOKEN
ID_TOKEN d
COLON_TOKEN
CHAR
SEMICOLON_TOKEN
ID_TOKEN e
COLON_TOKEN
CHAR
ASSIGN_TOKEN
CHAR_TOKEN x
SEMICOLON_TOKEN
ID_TOKEN x
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
CLOSE_BRACK_TOKEN
STRING
SEMICOLON_TOKEN
ID_TOKEN y
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
CLOSE_BRACK_TOKEN
STRING
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
STRING_TOKEN a
COMMA_TOKEN
STRING_TOKEN b
COMMA_TOKEN
STRING_TOKEN c
CLOSE_CURLY_TOKEN
SEMICOLON_TOKEN
ID_TOKEN z
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
CLOSE_BRACK_TOKEN
ARRAY
OPEN_BRACK_TOKEN
CLOSE_BRACK_TOKEN
STRING
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
OPEN_CURLY_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[good10.bminor Input]===
/* Try accesssing arrays of various sizes; */

a: array [10] integer = {100,200,300,400,500,600,700,800,900};
b: array [10] integer;
c: array [10] array [10] integer;

testfunc: function void () = {
    i: integer;
    j: integer;

    for(i=0;i<10;i++) {
        b[i] = a[i] * 10;
    }

    for(i=0;i<5;i++) {
        b[i*2] = a[i] + b[i];
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            c[i][j] = i*j;
        }
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}

===[good10.bminor Output]===
TEST NOT PASSED

CCOMMENT_TOKEN
ID_TOKEN a
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
INT_TOKEN 10
CLOSE_BRACK_TOKEN
INTEGER
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
INT_TOKEN 100
COMMA_TOKEN
INT_TOKEN 200
COMMA_TOKEN
INT_TOKEN 300
COMMA_TOKEN
INT_TOKEN 400
COMMA_TOKEN
INT_TOKEN 500
COMMA_TOKEN
INT_TOKEN 600
COMMA_TOKEN
INT_TOKEN 700
COMMA_TOKEN
INT_TOKEN 800
COMMA_TOKEN
INT_TOKEN 900
CLOSE_CURLY_TOKEN
SEMICOLON_TOKEN
ID_TOKEN b
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
INT_TOKEN 10
CLOSE_BRACK_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN c
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
INT_TOKEN 10
CLOSE_BRACK_TOKEN
ARRAY
OPEN_BRACK_TOKEN
INT_TOKEN 10
CLOSE_BRACK_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN testfunc
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN i
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN j
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
FOR
OPEN_PARAN_TOKEN
ID_TOKEN i
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
ID_TOKEN i
LESS_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
ID_TOKEN i
INCREMENT_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN b
OPEN_BRACK_TOKEN
ID_TOKEN i
CLOSE_BRACK_TOKEN
ASSIGN_TOKEN
ID_TOKEN a
OPEN_BRACK_TOKEN
ID_TOKEN i
CLOSE_BRACK_TOKEN
MULTIPLY_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
FOR
OPEN_PARAN_TOKEN
ID_TOKEN i
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
ID_TOKEN i
LESS_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
ID_TOKEN i
INCREMENT_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN b
OPEN_BRACK_TOKEN
ID_TOKEN i
MULTIPLY_TOKEN
INT_TOKEN 2
CLOSE_BRACK_TOKEN
ASSIGN_TOKEN
ID_TOKEN a
OPEN_BRACK_TOKEN
ID_TOKEN i
CLOSE_BRACK_TOKEN
ADDITION_TOKEN
ID_TOKEN b
OPEN_BRACK_TOKEN
ID_TOKEN i
CLOSE_BRACK_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
FOR
OPEN_PARAN_TOKEN
ID_TOKEN j
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
ID_TOKEN j
LESS_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
ID_TOKEN i
INCREMENT_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
FOR
OPEN_PARAN_TOKEN
ID_TOKEN i
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
ID_TOKEN i
LESS_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
ID_TOKEN i
INCREMENT_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN c
OPEN_BRACK_TOKEN
ID_TOKEN i
CLOSE_BRACK_TOKEN
OPEN_BRACK_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[good11.bminor Input]===

/* Try locally declared array lengths */


testfunc: function void (x: integer, y: integer) = {
    i: integer;
    j: integer;

    a: array [10] integer = {100,200,300,400,500,600,700,800,900};
    b: array [x] integer;
    c: array [x] array [y] integer;

    for(i=0;i<10;i++) {
        b[i] = a[i] * 10;
    }

    for(i=0;i<5;i++) {
        b[i*2] = a[i] + b[i];
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            c[i][j] = i*j;
        }
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}

===[good11.bminor Output]===
TEST NOT PASSED

CCOMMENT_TOKEN
ID_TOKEN testfunc
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN i
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN j
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN a
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
INT_TOKEN 10
CLOSE_BRACK_TOKEN
INTEGER
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
INT_TOKEN 100
COMMA_TOKEN
INT_TOKEN 200
COMMA_TOKEN
INT_TOKEN 300
COMMA_TOKEN
INT_TOKEN 400
COMMA_TOKEN
INT_TOKEN 500
COMMA_TOKEN
INT_TOKEN 600
COMMA_TOKEN
INT_TOKEN 700
COMMA_TOKEN
INT_TOKEN 800
COMMA_TOKEN
INT_TOKEN 900
CLOSE_CURLY_TOKEN
SEMICOLON_TOKEN
ID_TOKEN b
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
ID_TOKEN x
CLOSE_BRACK_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN c
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
ID_TOKEN x
CLOSE_BRACK_TOKEN
ARRAY
OPEN_BRACK_TOKEN
ID_TOKEN y
CLOSE_BRACK_TOKEN
INTEGER
SEMICOLON_TOKEN
FOR
OPEN_PARAN_TOKEN
ID_TOKEN i
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
ID_TOKEN i
LESS_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
ID_TOKEN i
INCREMENT_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN b
OPEN_BRACK_TOKEN
ID_TOKEN i
CLOSE_BRACK_TOKEN
ASSIGN_TOKEN
ID_TOKEN a
OPEN_BRACK_TOKEN
ID_TOKEN i
CLOSE_BRACK_TOKEN
MULTIPLY_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
FOR
OPEN_PARAN_TOKEN
ID_TOKEN i
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
ID_TOKEN i
LESS_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
ID_TOKEN i
INCREMENT_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN b
OPEN_BRACK_TOKEN
ID_TOKEN i
MULTIPLY_TOKEN
INT_TOKEN 2
CLOSE_BRACK_TOKEN
ASSIGN_TOKEN
ID_TOKEN a
OPEN_BRACK_TOKEN
ID_TOKEN i
CLOSE_BRACK_TOKEN
ADDITION_TOKEN
ID_TOKEN b
OPEN_BRACK_TOKEN
ID_TOKEN i
CLOSE_BRACK_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
FOR
OPEN_PARAN_TOKEN
ID_TOKEN j
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
ID_TOKEN j
LESS_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
ID_TOKEN i
INCREMENT_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
FOR
OPEN_PARAN_TOKEN
ID_TOKEN i
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
ID_TOKEN i
LESS_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
ID_TOKEN i
INCREMENT_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN c
OPEN_BRACK_TOKEN
ID_TOKEN i
CLOSE_BRACK_TOKEN
OPEN_BRACK_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[good12.bminor Input]===

/* single statement ifs */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if(a > b) return a;
	else return b;
}

testfunc: function void ( z: integer ) =
{
	print "minimum", min(10, 5), "\n";
}

===[good12.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 65
SEMICOLON_TOKEN
ID_TOKEN s
COLON_TOKEN
STRING
ASSIGN_TOKEN
STRING_TOKEN hello
SEMICOLON_TOKEN
ID_TOKEN b
COLON_TOKEN
BOOLEAN
ASSIGN_TOKEN
FALSE
SEMICOLON_TOKEN
ID_TOKEN min
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
ID_TOKEN a
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN b
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN a
GREATER_TOKEN
ID_TOKEN b
CLOSE_PARAN_TOKEN
RETURN
ID_TOKEN a
SEMICOLON_TOKEN
ELSE
RETURN
ID_TOKEN b
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ID_TOKEN testfunc
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN z
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
PRINT
STRING_TOKEN minimum
COMMA_TOKEN
ID_TOKEN min
OPEN_PARAN_TOKEN
INT_TOKEN 10
COMMA_TOKEN
INT_TOKEN 5
CLOSE_PARAN_TOKEN
COMMA_TOKEN
STRING_TOKEN 

SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good13.bminor Input]===
/* string format expr */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if(a > b) return a;
	else return b;
}

testfunc: function void ( z: integer ) =
{
	print "minimum", min(10, 5), "\n", z=10, z==10;
}
	

===[good13.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 65
SEMICOLON_TOKEN
ID_TOKEN s
COLON_TOKEN
STRING
ASSIGN_TOKEN
STRING_TOKEN hello
SEMICOLON_TOKEN
ID_TOKEN b
COLON_TOKEN
BOOLEAN
ASSIGN_TOKEN
FALSE
SEMICOLON_TOKEN
ID_TOKEN min
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
ID_TOKEN a
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN b
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN a
GREATER_TOKEN
ID_TOKEN b
CLOSE_PARAN_TOKEN
RETURN
ID_TOKEN a
SEMICOLON_TOKEN
ELSE
RETURN
ID_TOKEN b
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ID_TOKEN testfunc
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN z
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
PRINT
STRING_TOKEN minimum
COMMA_TOKEN
ID_TOKEN min
OPEN_PARAN_TOKEN
INT_TOKEN 10
COMMA_TOKEN
INT_TOKEN 5
CLOSE_PARAN_TOKEN
COMMA_TOKEN
STRING_TOKEN 

COMMA_TOKEN
ID_TOKEN z
ASSIGN_TOKEN
INT_TOKEN 10
COMMA_TOKEN
ID_TOKEN z
ASSERT_EQ_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good14.bminor Input]===

/* returning various expressions */

testfunc: function void ( x: integer, y:integer, z:integer ) = {
	return x;
	return "hello";
	return x = 10;
	return x == 10;
	return x > 5;
	return testfunc(x, y, z);
}

===[good14.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN testfunc
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN z
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
RETURN
ID_TOKEN x
SEMICOLON_TOKEN
RETURN
STRING_TOKEN hello
SEMICOLON_TOKEN
RETURN
ID_TOKEN x
ASSIGN_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
RETURN
ID_TOKEN x
ASSERT_EQ_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
RETURN
ID_TOKEN x
GREATER_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
RETURN
ID_TOKEN testfunc
OPEN_PARAN_TOKEN
ID_TOKEN x
COMMA_TOKEN
ID_TOKEN y
COMMA_TOKEN
ID_TOKEN z
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good15.bminor Input]===


/* code blocks */

testfunc: function void ( x: integer, y:integer, z:integer ) = {
	{
		return x;
		return "hello";
		return x = 10;
	}
	{
		return x == 10;
		{
			return x > 5;
			return testfunc(x, y, z);
		}
	}
}

===[good15.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN testfunc
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN z
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
OPEN_CURLY_TOKEN
RETURN
ID_TOKEN x
SEMICOLON_TOKEN
RETURN
STRING_TOKEN hello
SEMICOLON_TOKEN
RETURN
ID_TOKEN x
ASSIGN_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
OPEN_CURLY_TOKEN
RETURN
ID_TOKEN x
ASSERT_EQ_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
OPEN_CURLY_TOKEN
RETURN
ID_TOKEN x
GREATER_TOKEN
INT_TOKEN 5
SEMICOLON_TOKEN
RETURN
ID_TOKEN testfunc
OPEN_PARAN_TOKEN
ID_TOKEN x
COMMA_TOKEN
ID_TOKEN y
COMMA_TOKEN
ID_TOKEN z
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
CLOSE_CURLY_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good2.bminor Input]===
/* Function prototypes are declarations without bodies. */

ComputeAscii: function char ( c: char );

GetLength: function integer ( s: string, i: integer );

/* Function body has some code in it */

GetArea: function integer ( width: integer, height: integer ) =
{
	return width * height;
}

===[good2.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN ComputeAscii
COLON_TOKEN
FUNCTION
CHAR
OPEN_PARAN_TOKEN
ID_TOKEN c
COLON_TOKEN
CHAR
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN GetLength
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
ID_TOKEN s
COLON_TOKEN
STRING
COMMA_TOKEN
ID_TOKEN i
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
CCOMMENT_TOKEN
ID_TOKEN GetArea
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
ID_TOKEN width
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN height
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
RETURN
ID_TOKEN width
MULTIPLY_TOKEN
ID_TOKEN height
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good3.bminor Input]===
/* A function contains a sequence of statements */
/* Some of those statements can be decls */

simplefunc: function void () = {
     x: integer;
     y: integer = 20;
     s: string = "hello world";
}

===[good3.bminor Output]===
Success!

CCOMMENT_TOKEN
CCOMMENT_TOKEN
ID_TOKEN simplefunc
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 20
SEMICOLON_TOKEN
ID_TOKEN s
COLON_TOKEN
STRING
ASSIGN_TOKEN
STRING_TOKEN hello world
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good4.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 + x / y;

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x < y ) {
         return true;
     } else {
         return false;
     }

}

===[good4.bminor Output]===
Success!

CCOMMENT_TOKEN
CCOMMENT_TOKEN
ID_TOKEN simplefunc
COLON_TOKEN
FUNCTION
BOOLEAN
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
CPPCOMMENT_TOKEN
ID_TOKEN z
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
ID_TOKEN x
MULTIPLY_TOKEN
ID_TOKEN y
SEMICOLON_TOKEN
CPPCOMMENT_TOKEN
ID_TOKEN z
ASSIGN_TOKEN
INT_TOKEN 16
ADDITION_TOKEN
ID_TOKEN x
DIVISION_TOKEN
ID_TOKEN y
SEMICOLON_TOKEN
CPPCOMMENT_TOKEN
PRINT
STRING_TOKEN input is: 
COMMA_TOKEN
ID_TOKEN x
COMMA_TOKEN
STRING_TOKEN  and 
COMMA_TOKEN
ID_TOKEN y
COMMA_TOKEN
STRING_TOKEN 

SEMICOLON_TOKEN
CPPCOMMENT_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
LESS_TOKEN
ID_TOKEN y
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
RETURN
TRUE
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ELSE
OPEN_CURLY_TOKEN
RETURN
FALSE
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good5.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */
/* Add some float */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;
	
     // A float declaration
     q: float = 10e9;
     
     // another float
     v: float = 2.10e2;

     // a float operation
     return v;

}

===[good5.bminor Output]===
Success!

CCOMMENT_TOKEN
CCOMMENT_TOKEN
CCOMMENT_TOKEN
ID_TOKEN simplefunc
COLON_TOKEN
FUNCTION
BOOLEAN
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
CPPCOMMENT_TOKEN
ID_TOKEN z
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
ID_TOKEN x
MULTIPLY_TOKEN
ID_TOKEN y
SEMICOLON_TOKEN
CPPCOMMENT_TOKEN
ID_TOKEN q
COLON_TOKEN
FLOAT
ASSIGN_TOKEN
FLOAT_TOKEN 10000000000.000000
SEMICOLON_TOKEN
CPPCOMMENT_TOKEN
ID_TOKEN v
COLON_TOKEN
FLOAT
ASSIGN_TOKEN
FLOAT_TOKEN 210.000000
SEMICOLON_TOKEN
CPPCOMMENT_TOKEN
RETURN
ID_TOKEN v
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good6.bminor Input]===
/* Try several variations of for-loops */

simplefunc: function void (r: integer, s: integer, t: integer ) = {

    i: integer;

    for( i=0; i<r; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<s; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<r; ) {
        print i,"\n";
        i++;
    }

    for(;;) print "forever!\n";
}

===[good6.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN simplefunc
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN r
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN s
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN t
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN i
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
FOR
OPEN_PARAN_TOKEN
ID_TOKEN i
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
ID_TOKEN i
LESS_TOKEN
ID_TOKEN r
SEMICOLON_TOKEN
ID_TOKEN i
INCREMENT_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
PRINT
ID_TOKEN i
COMMA_TOKEN
STRING_TOKEN 

SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ID_TOKEN i
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
FOR
OPEN_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN i
LESS_TOKEN
ID_TOKEN s
SEMICOLON_TOKEN
ID_TOKEN i
INCREMENT_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
PRINT
ID_TOKEN i
COMMA_TOKEN
STRING_TOKEN 

SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ID_TOKEN i
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
FOR
OPEN_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN i
LESS_TOKEN
ID_TOKEN r
SEMICOLON_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
PRINT
ID_TOKEN i
COMMA_TOKEN
STRING_TOKEN 

SEMICOLON_TOKEN
ID_TOKEN i
INCREMENT_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
FOR
OPEN_PARAN_TOKEN
SEMICOLON_TOKEN
SEMICOLON_TOKEN
CLOSE_PARAN_TOKEN
PRINT
STRING_TOKEN forever!

SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good7.bminor Input]===
/* Test various nestings of if-else statements */

testit: function boolean ( x: integer, y: integer ) = {

	/* If statement without braces */
	if( x<y ) print "less\n"; else print "low\n";

	/* If statement with braces */
	if( x<y ) { print "less\n"; } else { print "low\n"; }

	/* This statement should print nothing */
        if(20<10) if(10<20) print "incorrect!"; else print "dangling else!";

	/* statements and decls inside of if-else */

        if( x>y ) {
              i: integer;
              for(i=0;i<x;i++) print i, "\n";
        } else {
              i: integer;
              for(i=0;i<y;i++) print i, "\n";
        }

	/* A decl can come after a few statements */
	i: integer;

	/* try the other way around */
	for(i=0;i<x;i++) {
              if( i<x ) print "small"; else print "large";
        }

        return true;
}

===[good7.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN testit
COLON_TOKEN
FUNCTION
BOOLEAN
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
CCOMMENT_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
LESS_TOKEN
ID_TOKEN y
CLOSE_PARAN_TOKEN
PRINT
STRING_TOKEN less

SEMICOLON_TOKEN
ELSE
PRINT
STRING_TOKEN low

SEMICOLON_TOKEN
CCOMMENT_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
LESS_TOKEN
ID_TOKEN y
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
PRINT
STRING_TOKEN less

SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ELSE
OPEN_CURLY_TOKEN
PRINT
STRING_TOKEN low

SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
CCOMMENT_TOKEN
IF
OPEN_PARAN_TOKEN
INT_TOKEN 20
LESS_TOKEN
INT_TOKEN 10
CLOSE_PARAN_TOKEN
IF
OPEN_PARAN_TOKEN
INT_TOKEN 10
LESS_TOKEN
INT_TOKEN 20
CLOSE_PARAN_TOKEN
PRINT
STRING_TOKEN incorrect!
SEMICOLON_TOKEN
ELSE
PRINT
STRING_TOKEN dangling else!
SEMICOLON_TOKEN
CCOMMENT_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
GREATER_TOKEN
ID_TOKEN y
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN i
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
FOR
OPEN_PARAN_TOKEN
ID_TOKEN i
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
ID_TOKEN i
LESS_TOKEN
ID_TOKEN x
SEMICOLON_TOKEN
ID_TOKEN i
INCREMENT_TOKEN
CLOSE_PARAN_TOKEN
PRINT
ID_TOKEN i
COMMA_TOKEN
STRING_TOKEN 

SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ELSE
OPEN_CURLY_TOKEN
ID_TOKEN i
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
FOR
OPEN_PARAN_TOKEN
ID_TOKEN i
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
ID_TOKEN i
LESS_TOKEN
ID_TOKEN y
SEMICOLON_TOKEN
ID_TOKEN i
INCREMENT_TOKEN
CLOSE_PARAN_TOKEN
PRINT
ID_TOKEN i
COMMA_TOKEN
STRING_TOKEN 

SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
CCOMMENT_TOKEN
ID_TOKEN i
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
CCOMMENT_TOKEN
FOR
OPEN_PARAN_TOKEN
ID_TOKEN i
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
ID_TOKEN i
LESS_TOKEN
ID_TOKEN x
SEMICOLON_TOKEN
ID_TOKEN i
INCREMENT_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN i
LESS_TOKEN
ID_TOKEN x
CLOSE_PARAN_TOKEN
PRINT
STRING_TOKEN small
SEMICOLON_TOKEN
ELSE
PRINT
STRING_TOKEN large
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
RETURN
TRUE
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good8.bminor Input]===
/* Now try some expressions */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if( a<b ) return a; else return b;
}

testfunc: function void ( z: integer ) =
{
	// Nested integer operators.
	y: integer = x*(x*10 + 55%6 + z/10);
	print "y: ", y, "\n";

	// Nested boolean operations.
	c: boolean = ( x<100 && y>200 ) || !(b=true);
	print "c: ", c, "\n";

	// Boolean operations on strings?
	d: boolean = (s == "goodbye");
	print "d: ", d, "\n";

	// Can we stack up assignments?
	z = y = x;

	a: array [100] integer;

	// Function calls and array accesses:
	y = min(a[10],a[20]);
}

===[good8.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 65
SEMICOLON_TOKEN
ID_TOKEN s
COLON_TOKEN
STRING
ASSIGN_TOKEN
STRING_TOKEN hello
SEMICOLON_TOKEN
ID_TOKEN b
COLON_TOKEN
BOOLEAN
ASSIGN_TOKEN
FALSE
SEMICOLON_TOKEN
ID_TOKEN min
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
ID_TOKEN a
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN b
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN a
LESS_TOKEN
ID_TOKEN b
CLOSE_PARAN_TOKEN
RETURN
ID_TOKEN a
SEMICOLON_TOKEN
ELSE
RETURN
ID_TOKEN b
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ID_TOKEN testfunc
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN z
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
CPPCOMMENT_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
ID_TOKEN x
MULTIPLY_TOKEN
OPEN_PARAN_TOKEN
ID_TOKEN x
MULTIPLY_TOKEN
INT_TOKEN 10
ADDITION_TOKEN
INT_TOKEN 55
MODULO_TOKEN
INT_TOKEN 6
ADDITION_TOKEN
ID_TOKEN z
DIVISION_TOKEN
INT_TOKEN 10
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
PRINT
STRING_TOKEN y: 
COMMA_TOKEN
ID_TOKEN y
COMMA_TOKEN
STRING_TOKEN 

SEMICOLON_TOKEN
CPPCOMMENT_TOKEN
ID_TOKEN c
COLON_TOKEN
BOOLEAN
ASSIGN_TOKEN
OPEN_PARAN_TOKEN
ID_TOKEN x
LESS_TOKEN
INT_TOKEN 100
AND_TOKEN
ID_TOKEN y
GREATER_TOKEN
INT_TOKEN 200
CLOSE_PARAN_TOKEN
OR_TOKEN
NOT_TOKEN
OPEN_PARAN_TOKEN
ID_TOKEN b
ASSIGN_TOKEN
TRUE
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
PRINT
STRING_TOKEN c: 
COMMA_TOKEN
ID_TOKEN c
COMMA_TOKEN
STRING_TOKEN 

SEMICOLON_TOKEN
CPPCOMMENT_TOKEN
ID_TOKEN d
COLON_TOKEN
BOOLEAN
ASSIGN_TOKEN
OPEN_PARAN_TOKEN
ID_TOKEN s
ASSERT_EQ_TOKEN
STRING_TOKEN goodbye
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
PRINT
STRING_TOKEN d: 
COMMA_TOKEN
ID_TOKEN d
COMMA_TOKEN
STRING_TOKEN 

SEMICOLON_TOKEN
CPPCOMMENT_TOKEN
ID_TOKEN z
ASSIGN_TOKEN
ID_TOKEN y
ASSIGN_TOKEN
ID_TOKEN x
SEMICOLON_TOKEN
ID_TOKEN a
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
INT_TOKEN 100
CLOSE_BRACK_TOKEN
INTEGER
SEMICOLON_TOKEN
CPPCOMMENT_TOKEN
ID_TOKEN y
ASSIGN_TOKEN
ID_TOKEN min
OPEN_PARAN_TOKEN
ID_TOKEN a
OPEN_BRACK_TOKEN
INT_TOKEN 10
CLOSE_BRACK_TOKEN
COMMA_TOKEN
ID_TOKEN a
OPEN_BRACK_TOKEN
INT_TOKEN 20
CLOSE_BRACK_TOKEN
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[good9.bminor Input]===
/* Check for minimum use of parentheses. */

testfunc: function void ( x: integer, y:integer, z:integer ) = {

          r: integer;
	  b: boolean;

          // Parens required
	  r = (x+y)/z;
	  r = x+(y+z);
	  b = (true||false) && (false||true);

          // Parens not required
	  r = x+(y/z);
	  r = (x+y)+z;
	  b = (x+y) < (x+z);
	  b = (true&&false) || (false&&true);

}

===[good9.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN testfunc
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
COMMA_TOKEN
ID_TOKEN z
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN r
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
ID_TOKEN b
COLON_TOKEN
BOOLEAN
SEMICOLON_TOKEN
CPPCOMMENT_TOKEN
ID_TOKEN r
ASSIGN_TOKEN
OPEN_PARAN_TOKEN
ID_TOKEN x
ADDITION_TOKEN
ID_TOKEN y
CLOSE_PARAN_TOKEN
DIVISION_TOKEN
ID_TOKEN z
SEMICOLON_TOKEN
ID_TOKEN r
ASSIGN_TOKEN
ID_TOKEN x
ADDITION_TOKEN
OPEN_PARAN_TOKEN
ID_TOKEN y
ADDITION_TOKEN
ID_TOKEN z
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN b
ASSIGN_TOKEN
OPEN_PARAN_TOKEN
TRUE
OR_TOKEN
FALSE
CLOSE_PARAN_TOKEN
AND_TOKEN
OPEN_PARAN_TOKEN
FALSE
OR_TOKEN
TRUE
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
CPPCOMMENT_TOKEN
ID_TOKEN r
ASSIGN_TOKEN
ID_TOKEN x
ADDITION_TOKEN
OPEN_PARAN_TOKEN
ID_TOKEN y
DIVISION_TOKEN
ID_TOKEN z
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN r
ASSIGN_TOKEN
OPEN_PARAN_TOKEN
ID_TOKEN x
ADDITION_TOKEN
ID_TOKEN y
CLOSE_PARAN_TOKEN
ADDITION_TOKEN
ID_TOKEN z
SEMICOLON_TOKEN
ID_TOKEN b
ASSIGN_TOKEN
OPEN_PARAN_TOKEN
ID_TOKEN x
ADDITION_TOKEN
ID_TOKEN y
CLOSE_PARAN_TOKEN
LESS_TOKEN
OPEN_PARAN_TOKEN
ID_TOKEN x
ADDITION_TOKEN
ID_TOKEN z
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
ID_TOKEN b
ASSIGN_TOKEN
OPEN_PARAN_TOKEN
TRUE
AND_TOKEN
FALSE
CLOSE_PARAN_TOKEN
OR_TOKEN
OPEN_PARAN_TOKEN
FALSE
AND_TOKEN
TRUE
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


====Bad Tests====
===[bad1.bminor Input]===
/* A program is a not an expression at the top level */

x = 5;


===[bad1.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN x
ASSIGN_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[bad10.bminor Input]===
/* Unbalanced braces */

main:function integer ( x: integer ) =
{
	if(x<10) {
              if(x!=23) {
                  print "hello";
              } else {
                  print "goodbye";
              }
        print "too few braces";
}

===[bad10.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
LESS_TOKEN
INT_TOKEN 10
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
NOT_EQUAL_TOKEN
INT_TOKEN 23
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
PRINT
STRING_TOKEN hello
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ELSE
OPEN_CURLY_TOKEN
PRINT
STRING_TOKEN goodbye
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
PRINT
STRING_TOKEN too few braces
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[bad11.bminor Input]===
/* return return */

simplefunc: function void () = {
     x: integer = 10;
     y: integer = 20;

     return return;

}

===[bad11.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN simplefunc
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 20
SEMICOLON_TOKEN
RETURN
RETURN
Parse Failed

Parser error: syntax error

return code: 1


===[bad12.bminor Input]===
/* invalid keyword usage */

simplefunc: function void () = {
     x: integer = 10;
     array: integer = 20;

     return x + array;
}

===[bad12.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN simplefunc
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
ARRAY
Parse Failed

Parser error: syntax error

return code: 1


===[bad13.bminor Input]===

/* empty array initializer */

simplefunc: function void () = {
     x: integer = 10;
     y: integer = 20;
	
     p: array [5] integer = {};
}

===[bad13.bminor Output]===
TEST NOT PASSED

CCOMMENT_TOKEN
ID_TOKEN simplefunc
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 20
SEMICOLON_TOKEN
ID_TOKEN p
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
INT_TOKEN 5
CLOSE_BRACK_TOKEN
INTEGER
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
CLOSE_CURLY_TOKEN
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
Parse Succeeded


return code: 0


===[bad14.bminor Input]===

/* Array declaration attempt */


simplefunc: function void () = {
	c7: array [x] char = {'C', 'E', 'G', "Bb"};
	d7: array [c7;] char = c7 + 1; 
}

===[bad14.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN simplefunc
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN c7
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
ID_TOKEN x
CLOSE_BRACK_TOKEN
CHAR
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
CHAR_TOKEN C
COMMA_TOKEN
CHAR_TOKEN E
COMMA_TOKEN
CHAR_TOKEN G
COMMA_TOKEN
STRING_TOKEN Bb
CLOSE_CURLY_TOKEN
SEMICOLON_TOKEN
ID_TOKEN d7
COLON_TOKEN
ARRAY
OPEN_BRACK_TOKEN
ID_TOKEN c7
SEMICOLON_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[bad15.bminor Input]===
/* empty file? */


===[bad15.bminor Output]===

CCOMMENT_TOKEN
Parse Succeeded


return code: 0


===[bad2.bminor Input]===
/* A program is a not a sequence of statements */

print "hello world";
return 5;

===[bad2.bminor Output]===
Success!

CCOMMENT_TOKEN
PRINT
Parse Failed

Parser error: syntax error

return code: 1


===[bad3.bminor Input]===
/* Cannot have more elses than ifs */

simplefunc: function void () = {
     x: integer = 10;
     y: integer = 20;

     if(x<y) if(y>x) else print "a"; else print "b" else print "c";
}

===[bad3.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN simplefunc
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 10
SEMICOLON_TOKEN
ID_TOKEN y
COLON_TOKEN
INTEGER
ASSIGN_TOKEN
INT_TOKEN 20
SEMICOLON_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
LESS_TOKEN
ID_TOKEN y
CLOSE_PARAN_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN y
GREATER_TOKEN
ID_TOKEN x
CLOSE_PARAN_TOKEN
ELSE
Parse Failed

Parser error: syntax error

return code: 1


===[bad4.bminor Input]===
/* For loop does need to have semis even if parts are missing */

main: function void() =
{
        i: integer;
	for(i=0;) print i;
}

===[bad4.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
ID_TOKEN i
COLON_TOKEN
INTEGER
SEMICOLON_TOKEN
FOR
OPEN_PARAN_TOKEN
ID_TOKEN i
ASSIGN_TOKEN
INT_TOKEN 0
SEMICOLON_TOKEN
CLOSE_PARAN_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[bad5.bminor Input]===
/* Print statement must separate elemnts with a comma */

main:function void()
{
	print x y z;
}

===[bad5.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[bad6.bminor Input]===
/* Function parameters must separate with a comma */

main:function void( x:integer y:integer );

===[bad6.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
VOID
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
ID_TOKEN y
Parse Failed

Parser error: syntax error

return code: 1


===[bad7.bminor Input]===
/* No invalid seqeuences of operators */

main:function integer ( x:integer ) = {

        return x + * 5 * - 7;
}

===[bad7.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
RETURN
ID_TOKEN x
ADDITION_TOKEN
MULTIPLY_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[bad8.bminor Input]===
/* Unbalanced parentheses */

main:function integer( x: integer ) =
{
	return (x*(x+5);
}

===[bad8.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
RETURN
OPEN_PARAN_TOKEN
ID_TOKEN x
MULTIPLY_TOKEN
OPEN_PARAN_TOKEN
ID_TOKEN x
ADDITION_TOKEN
INT_TOKEN 5
CLOSE_PARAN_TOKEN
SEMICOLON_TOKEN
Parse Failed

Parser error: syntax error

return code: 1


===[bad9.bminor Input]===
/* Unbalanced braces */

main:function integer ( x: integer ) =
{
	if(x<10) {
              if(x!=23) {
                  print "hello";
              } else {
                  print "goodbye";
              }
        }

    }
    print "too many braces";
}

===[bad9.bminor Output]===
Success!

CCOMMENT_TOKEN
ID_TOKEN main
COLON_TOKEN
FUNCTION
INTEGER
OPEN_PARAN_TOKEN
ID_TOKEN x
COLON_TOKEN
INTEGER
CLOSE_PARAN_TOKEN
ASSIGN_TOKEN
OPEN_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
LESS_TOKEN
INT_TOKEN 10
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
IF
OPEN_PARAN_TOKEN
ID_TOKEN x
NOT_EQUAL_TOKEN
INT_TOKEN 23
CLOSE_PARAN_TOKEN
OPEN_CURLY_TOKEN
PRINT
STRING_TOKEN hello
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
ELSE
OPEN_CURLY_TOKEN
PRINT
STRING_TOKEN goodbye
SEMICOLON_TOKEN
CLOSE_CURLY_TOKEN
CLOSE_CURLY_TOKEN
CLOSE_CURLY_TOKEN
PRINT
Parse Failed

Parser error: syntax error

return code: 1


===== SUMMARIZED PARSER RESULTS =====
{
  "student_tests": {
    "Good": {
      "correct": 15,
      "incorrect": 0
    },
    "Bad": {
      "correct": 15,
      "incorrect": 0
    }
  },
  "hidden_tests": {
    "Good": {
      "correct": 12,
      "incorrect": 3
    },
    "Bad": {
      "correct": 14,
      "incorrect": 1
    }
  }
}

Parser Project Grade
-------------------

General Structure: 22/25
---------------------------------
Overall structure is correct. Scanner tokens should
not be printing out during parsing.

Eliminating Ambiguities: 10/10
--------------------------------------
no shift reduce conflicts! 

Student Tests: 20/20
---------------------------
Passes all your tests.

Hidden Tests: 31/35
---------------------------
4 hidden tests failed, looks like some issues with arrays
such as multi dimensional arrays.

Code Style: 10/10
------------------------
format and naming look good

Total: 93/100
------------------------------------------
